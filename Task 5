# Q:1 write a python program to calculate the total number of vowels and count each individual vowel A,E,I,O,U in the string " Guvi Geeks Network Private Limited"?

def count_vowels(string):
    # Convert the string to lowercase to handle both lowercase and uppercase vowels
    string = string.lower()
    
    # Initialize counts for individual vowels
    count_a = string.count('a')
    count_e = string.count('e')
    count_i = string.count('i')
    count_o = string.count('o')
    count_u = string.count('u')
    
    # Calculate the total count of vowels
    total_vowels = count_a + count_e + count_i + count_o + count_u
    
    return total_vowels, count_a, count_e, count_i, count_o, count_u

# Given string
input_string = "Guvi Geeks Network Private Limited"

# Calculate counts
total_vowels, count_a, count_e, count_i, count_o, count_u = count_vowels(input_string)

# Display results
print("Total number of vowels:", total_vowels)
print("Count of 'A':", count_a)
print("Count of 'E':", count_e)
print("Count of 'I':", count_i)
print("Count of 'O':", count_o)
print("Count of 'U':", count_u)

#Q:2 create a pyramid of numbers from 1 to 20 using for loops

# Number of rows in the pyramid
rows = 5  # Adjust this value based on the desired number of rows

# Initialize the starting number
number = 1

# Outer loop for rows
for i in range(1, rows + 1):
    # Print spaces for formatting
    print(" " * (rows - i), end="")

    # Inner loop for each row
    for j in range(1, i * 2):
        print(number, end=" ")
        number += 1
        if number > 20:  # Adjust the limit based on the desired maximum number
            break

    # Move to the next line after each row
    print()
# Q:3 write a function that takes a string and returns new string with all vowels removed

def remove_vowels(input_string):
    vowels = "aeiouAEIOU"  # Define a string containing all vowels (both lowercase and uppercase)
    result = ""

    for char in input_string:
        if char not in vowels:
            result += char

    return result


# Example usage:
input_string = "Hello, how are you?"
result_string = remove_vowels(input_string)
print("Original string:", input_string)
print("String with vowels removed:", result_string)

# Q4 write a function  that takes a string and returns the number of unique characters in it

def count_unique_characters(input_string):
    unique_chars = set(input_string)  # Using set to get unique characters
    return len(unique_chars)

# Example usage:
input_string = "Hello hi, how are you???"
unique_count = count_unique_characters(input_string)
print("Original string:", input_string)
print("Number of unique characters:", unique_count)

# Q5 write a program that takes string and returns true if its a palindrome, false otherwise

def is_palindrome(input_string):
    # Remove spaces and convert the string to lowercase for case insensitivity
    input_string = input_string.replace(" ", "").lower()
    
    # Check if the string is equal to its reverse
    return input_string == input_string[::-1]

# Example usage:
input_str = "level"
result = is_palindrome(input_str)

if result:
    print(f'The string "{input_str}" is a palindrome.')
else:
    print(f'The string "{input_str}" is not a palindrome.')

#Q6 write a function that takes two strings and returns the longest common substring between them

def longest_common_substring(str1, str2):
    # Initialize a matrix to store the length of longest common suffixes
    m = [[0] * (len(str2) + 1) for _ in range(len(str1) + 1)]
    
    # Variables to store the length of the longest common substring and its ending position
    max_length = 0
    ending_index = 0
    
    for i in range(1, len(str1) + 1):
        for j in range(1, len(str2) + 1):
            if str1[i - 1] == str2[j - 1]:
                m[i][j] = m[i - 1][j - 1] + 1
                if m[i][j] > max_length:
                    max_length = m[i][j]
                    ending_index = i
    
    # Extract the longest common substring based on the ending index and its length
    longest_substring = str1[ending_index - max_length:ending_index]
    return longest_substring

# Example usage:
string1 = "abcdefg"
string2 = "bcdeft"

result = longest_common_substring(string1, string2)
print(f"The longest common substring between '{string1}' and '{string2}' is: '{result}'")

#Q7 write a function that takes a string and returns most frequent character in it

from collections import Counter

def most_frequent_character(input_string):
    # Use Counter to count occurrences of each character in the string
    char_count = Counter(input_string)
    
    # Get the most common character using Counter's most_common() method
    most_common = char_count.most_common(1)
    
    # Return the most frequent character
    return most_common[0][0] if most_common else None

# Example usage:
input_str = "hello world"
result = most_frequent_character(input_str)

if result:
    print(f"The most frequent character in '{input_str}' is: '{result}'")
else:
    print("No characters in the string.")

#Q8 write a function that takes a string and returns true if it is an anagram of another string, false otherwise

def is_anagram(str1, str2):
    # Remove spaces and convert strings to lowercase for comparison
    str1 = str1.replace(" ", "").lower()
    str2 = str2.replace(" ", "").lower()
    
    # Check if the sorted strings are equal
    return sorted(str1) == sorted(str2)

# Example usage:
string1 = "Listen"
string2 = "Silent"
result = is_anagram(string1, string2)

if result:
    print(f"'{string1}' and '{string2}' are anagrams.")
else:
    print(f"'{string1}' and '{string2}' are not anagrams.")

#Q9 write a program that takes a string and returns the number of words in it

def count_words(input_string):
    # Split the string into words using whitespace as a delimiter
    words = input_string.split()

    # Return the count of words
    return len(words)


# Example usage:
input_str = "The world is a better place"
word_count = count_words(input_str)
print(f"The number of words in the string '{input_str}' is: {word_count}")

